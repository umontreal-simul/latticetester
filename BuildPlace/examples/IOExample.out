We can write messages in the file.
Here is one way to write a matrix.
   [[1 0 0 0 943 663 207 454 496]
    [0 1 0 0 447 818 247 360 658]
    [0 0 1 0 1004 777 478 927 653]
    [0 0 0 1 598 114 662 407 483]
    [0 0 0 0 503 0 0 0 0]
    [0 0 0 0 0 503 0 0 0]
    [0 0 0 0 0 0 503 0 0]
    [0 0 0 0 0 0 0 503 0]
    [0 0 0 0 0 0 0 0 503]]

  Here is another one.
  [1 0 0 0 943 663 207 454 496]
  [0 1 0 0 447 818 247 360 658]
  [0 0 1 0 1004 777 478 927 653]
  [0 0 0 1 598 114 662 407 483]
  [0 0 0 0 503 0 0 0 0]
  [0 0 0 0 0 503 0 0 0]
  [0 0 0 0 0 0 503 0 0]
  [0 0 0 0 0 0 0 503 0]
  [0 0 0 0 0 0 0 0 503]
  

It's also possible to use *ToString() methods to write stuff in the output
file.
The matrix and its vectors norms:
Primal Basis:
  Dim = 9 
    [ 0 0 0 0 503 0 0 0 0 ]
    [ 0 0 0 0 0 503 0 0 0 ]
    [ 0 0 0 0 0 0 503 0 0 ]
    [ 0 0 0 0 0 0 0 503 0 ]
    [ 0 0 0 0 0 0 0 0 503 ]
    [ 0 0 0 1 598 114 662 407 483 ]
    [ 0 1 0 0 447 818 247 360 658 ]
    [ 1 0 0 0 943 663 207 454 496 ]
    [ 0 0 1 0 1004 777 478 927 653 ]
  Norms:
    [253009 253009 253009 253009 253009 1207783 1492507 1823800 3125968 ]


Write the matrix after LLL reduction
   [[-9 -7 -14 -5 9 -3 -13 10 -4]
    [11 15 16 6 11 -16 -3 3 1]
    [4 6 -20 -5 -17 1 3 0 14]
    [-1 -8 21 -5 -6 -11 18 14 5]
    [-8 30 -7 7 6 8 0 7 -5]
    [-9 -5 0 -9 -8 -17 -2 8 -29]
    [6 -9 14 -17 -8 23 -10 10 -3]
    [5 4 -4 -26 17 12 1 -17 2]
    [-21 24 20 -10 -5 -11 -6 -5 25]]

Write the upper triangular matrix
   [[1 3 945 1000 959 19 12 1018 41]
    [0 1 817 325 497 717 424 93 444]
    [0 0 1 920 380 90 409 423 447]
    [0 0 0 1 632 628 904 869 235]
    [0 0 0 0 1 523 584 759 475]
    [0 0 0 0 0 1 183 429 403]
    [0 0 0 0 0 0 24 227 257]
    [0 0 0 0 0 0 0 128 509]
    [0 0 0 0 0 0 0 0 518]]
Writers can be used as the program progresses, just likeusing a standard
output print, but also can be created at the end of theexecution to print the
result of the execution, making them quiteflexible.
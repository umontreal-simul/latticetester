/**
 * \page aaroutine Main functions
 *
 *
 * We present here the routine functions included in *LatticeTester*.
 * Please, read the Background before using theses functions.
 *
 *
 \htmlonly

<h2 class="memtitle">FigureOfMerit() <span class="overload">[1/2]</span></h2>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double LatticeTester::FigureOfMerit </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d7/df8/Types_8h.html#ab072659538661107e2bf108cff9bb60d">BMat</a>&#160;</td>
          <td class="paramname"><em>matrix</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d8/d74/namespaceLatticeTester.html#ab747c1cbb0f5e47fef711b62327a8e90">NormaType</a>&#160;</td>
          <td class="paramname"><em>normalizerType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d8/d74/namespaceLatticeTester.html#a191af830e61af769e233e1b03138520e">PreReductionType</a>&#160;</td>
          <td class="paramname"><em>preRed</em> = <code><a class="el" href="../../d8/d74/namespaceLatticeTester.html#a191af830e61af769e233e1b03138520ea14aace9298ad3f3297ff86c30b8d34eb">BKZ</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d8/d74/namespaceLatticeTester.html#a94f96ff406f8b56147a2b7fd96209cb2">PrecisionType</a>&#160;</td>
          <td class="paramname"><em>doublePrecision</em> = <code><a class="el" href="../../d8/d74/namespaceLatticeTester.html#a94f96ff406f8b56147a2b7fd96209cb2a14b6ff7a5d157ffdfd9ab4d80d7f5ea6">DOUBLE</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>fact</em> = <code>0.999</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>blocksize</em> = <code>20</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">


<p>This function compute the Figure of Merit for a given matrix, according to a specified normalization criteria. </p>
<p>It first computes the shortest non-zero vector using the function <a>ShortestVector()</a>. It then normalizes this value. Returns -1.0 if there was an error in Branch-and-Bound procedure while calculating the length of shortest non-zero vector. Return the figure of merit otherwise. </p>

</div>
</div>

<a id="aeb4b15313181b5065b236d87b7841093"></a>
<h2 class="memtitle">FigureOfMerit() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double LatticeTester::FigureOfMerit </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d7/df8/Types_8h.html#ab072659538661107e2bf108cff9bb60d">BMat</a>&#160;</td>
          <td class="paramname"><em>matrix</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d8/d74/namespaceLatticeTester.html#ab747c1cbb0f5e47fef711b62327a8e90">NormaType</a>&#160;</td>
          <td class="paramname"><em>normalizerType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>maxNodesBB</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d8/d74/namespaceLatticeTester.html#a191af830e61af769e233e1b03138520e">PreReductionType</a>&#160;</td>
          <td class="paramname"><em>preRed</em> = <code><a class="el" href="../../d8/d74/namespaceLatticeTester.html#a191af830e61af769e233e1b03138520ea14aace9298ad3f3297ff86c30b8d34eb">BKZ</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d8/d74/namespaceLatticeTester.html#a94f96ff406f8b56147a2b7fd96209cb2">PrecisionType</a>&#160;</td>
          <td class="paramname"><em>doublePrecision</em> = <code><a class="el" href="../../d8/d74/namespaceLatticeTester.html#a94f96ff406f8b56147a2b7fd96209cb2a14b6ff7a5d157ffdfd9ab4d80d7f5ea6">DOUBLE</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>fact</em> = <code>0.999</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>blocksize</em> = <code>20</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Same thing as before but with the possibility to set a different value for the variable maxNodesBB. </p>

</div>
</div>
<a id="ade5067032184a0720897d52add657683"></a>
<h2 class="memtitle">MinkowskiReduction() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool LatticeTester::MinkowskiReduction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d7/df8/Types_8h.html#ab072659538661107e2bf108cff9bb60d">BMat</a> &amp;&#160;</td>
          <td class="paramname"><em>matrix</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d8/d74/namespaceLatticeTester.html#a191af830e61af769e233e1b03138520e">PreReductionType</a>&#160;</td>
          <td class="paramname"><em>preRed</em> = <code><a class="el" href="../../d8/d74/namespaceLatticeTester.html#a191af830e61af769e233e1b03138520ea14aace9298ad3f3297ff86c30b8d34eb">BKZ</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d8/d74/namespaceLatticeTester.html#a94f96ff406f8b56147a2b7fd96209cb2">PrecisionType</a>&#160;</td>
          <td class="paramname"><em>doublePrecision</em> = <code><a class="el" href="../../d8/d74/namespaceLatticeTester.html#a94f96ff406f8b56147a2b7fd96209cb2a14b6ff7a5d157ffdfd9ab4d80d7f5ea6">DOUBLE</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>fact</em> = <code>0.999</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>blocksize</em> = <code>20</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function reduces a basis to a Minkowski-reduced basis. </p>
<p>Such basis has strong properties regarding the length of its vectors but will require a huge running time, especially when the dimension of the basis increases. Such Minkowski-reduced basis is usefull, for example, to calculate a Beyer quotient (as implemented in <a class="el" href="../../d8/d74/namespaceLatticeTester.html#a70b2654f283deb28aaaf074503b3912e" title="This function compute the Figure of Merit to a given matrix, according to a normalization criteria...">FigureOfMerit()</a>). </p>

</div>
</div>
<a id="aea8356711a561e1a85ee1aa638f8070e"></a>
<h2 class="memtitle">MinkowskiReduction() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool LatticeTester::MinkowskiReduction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d7/df8/Types_8h.html#ab072659538661107e2bf108cff9bb60d">BMat</a> &amp;&#160;</td>
          <td class="paramname"><em>matrix</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>maxNodesBB</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d8/d74/namespaceLatticeTester.html#a191af830e61af769e233e1b03138520e">PreReductionType</a>&#160;</td>
          <td class="paramname"><em>preRed</em> = <code><a class="el" href="../../d8/d74/namespaceLatticeTester.html#a191af830e61af769e233e1b03138520ea14aace9298ad3f3297ff86c30b8d34eb">BKZ</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d8/d74/namespaceLatticeTester.html#a94f96ff406f8b56147a2b7fd96209cb2">PrecisionType</a>&#160;</td>
          <td class="paramname"><em>doublePrecision</em> = <code><a class="el" href="../../d8/d74/namespaceLatticeTester.html#a94f96ff406f8b56147a2b7fd96209cb2a14b6ff7a5d157ffdfd9ab4d80d7f5ea6">DOUBLE</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>fact</em> = <code>0.999</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>blocksize</em> = <code>20</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Same thing as before but with the possibility to set a different value for the variable maxNodesBB. </p>

</div>
</div>
<a id="a13ba55df4c2ca1007014c7349ad679d8"></a>
<h2 class="memtitle">ShortestVector() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double LatticeTester::ShortestVector </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d7/df8/Types_8h.html#ab072659538661107e2bf108cff9bb60d">BMat</a>&#160;</td>
          <td class="paramname"><em>matrix</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d8/d74/namespaceLatticeTester.html#a9770e4d57aa715e249cd7e700c6f37e4">NormType</a>&#160;</td>
          <td class="paramname"><em>norm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d8/d74/namespaceLatticeTester.html#a191af830e61af769e233e1b03138520e">PreReductionType</a>&#160;</td>
          <td class="paramname"><em>preRed</em> = <code><a class="el" href="../../d8/d74/namespaceLatticeTester.html#a191af830e61af769e233e1b03138520ea14aace9298ad3f3297ff86c30b8d34eb">BKZ</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d8/d74/namespaceLatticeTester.html#a94f96ff406f8b56147a2b7fd96209cb2">PrecisionType</a>&#160;</td>
          <td class="paramname"><em>doublePrecision</em> = <code><a class="el" href="../../d8/d74/namespaceLatticeTester.html#a94f96ff406f8b56147a2b7fd96209cb2a14b6ff7a5d157ffdfd9ab4d80d7f5ea6">DOUBLE</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>fact</em> = <code>0.999</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>blocksize</em> = <code>20</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function allows computation of the shortest non-zero vector in a lattice, according to the selected norm. </p>
<p>Many parameters can bet set by the user, otherwise the function work with default values. Returns -1.0 if there was an error in Branch-and-Bound procedure. Return the length of the shortest non-zero vector otherwise. </p>
<p>For a given <a>PreReductionType</a> one can set the <a>PrecisionType</a> (type of precision used for floating point calculation), the coefficient <a>fact</a> used as a parameter in both BZK and LLL pre-reduction algorithms, and the parameter <a>blocksize</a> is used in BKZ to specifiy the size of the sub-block reduced at each step. </p>

</div>
</div>
<a id="a163335d2c66ef11b6494eeddf06de8c9"></a>
<h2 class="memtitle">ShortestVector() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double LatticeTester::ShortestVector </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d7/df8/Types_8h.html#ab072659538661107e2bf108cff9bb60d">BMat</a>&#160;</td>
          <td class="paramname"><em>matrix</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d8/d74/namespaceLatticeTester.html#a9770e4d57aa715e249cd7e700c6f37e4">NormType</a>&#160;</td>
          <td class="paramname"><em>norm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long&#160;</td>
          <td class="paramname"><em>maxNodesBB</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d8/d74/namespaceLatticeTester.html#a191af830e61af769e233e1b03138520e">PreReductionType</a>&#160;</td>
          <td class="paramname"><em>preRed</em> = <code><a class="el" href="../../d8/d74/namespaceLatticeTester.html#a191af830e61af769e233e1b03138520ea14aace9298ad3f3297ff86c30b8d34eb">BKZ</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d8/d74/namespaceLatticeTester.html#a94f96ff406f8b56147a2b7fd96209cb2">PrecisionType</a>&#160;</td>
          <td class="paramname"><em>doublePrecision</em> = <code><a class="el" href="../../d8/d74/namespaceLatticeTester.html#a94f96ff406f8b56147a2b7fd96209cb2a14b6ff7a5d157ffdfd9ab4d80d7f5ea6">DOUBLE</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>fact</em> = <code>0.999</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>blocksize</em> = <code>20</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Same thing as before but with the possibility to set a different value for the variable maxNodesBB. </p>

</div>
</div>

\endhtmlonly

\latexonly

\mbox{\Hypertarget{namespaceLatticeTester_a70b2654f283deb28aaaf074503b3912e}\label{namespaceLatticeTester_a70b2654f283deb28aaaf074503b3912e}}
\index{Lattice\+Tester@{Lattice\+Tester}!Figure\+Of\+Merit@{Figure\+Of\+Merit}}
\index{Figure\+Of\+Merit@{Figure\+Of\+Merit}!Lattice\+Tester@{Lattice\+Tester}}
\subsection{\texorpdfstring{Figure\+Of\+Merit()}{FigureOfMerit()}\hspace{0.1cm}{\footnotesize\ttfamily [1/2]}}
{\footnotesize\ttfamily double Lattice\+Tester\+::\+Figure\+Of\+Merit (\begin{DoxyParamCaption}\item[{\hyperlink{Types_8h_ab072659538661107e2bf108cff9bb60d}{B\+Mat}}]{matrix,  }\item[{\hyperlink{namespaceLatticeTester_ab747c1cbb0f5e47fef711b62327a8e90}{Norma\+Type}}]{normalizer\+Type,  }\item[{\hyperlink{namespaceLatticeTester_a191af830e61af769e233e1b03138520e}{Pre\+Reduction\+Type}}]{pre\+Red = {\ttfamily \hyperlink{namespaceLatticeTester_a191af830e61af769e233e1b03138520ea14aace9298ad3f3297ff86c30b8d34eb}{B\+KZ}},  }\item[{\hyperlink{namespaceLatticeTester_a94f96ff406f8b56147a2b7fd96209cb2}{Precision\+Type}}]{double\+Precision = {\ttfamily \hyperlink{namespaceLatticeTester_a94f96ff406f8b56147a2b7fd96209cb2a14b6ff7a5d157ffdfd9ab4d80d7f5ea6}{D\+O\+U\+B\+LE}},  }\item[{double}]{fact = {\ttfamily 0.999},  }\item[{int}]{blocksize = {\ttfamily 20} }\end{DoxyParamCaption})}



This function compute the Figure of Merit to a given matrix, according to a normalization criteria.

It first computes the shortest non-\/zero vector using the above functions. It then normalizes this value. Returns -\/1.\+0 if there was an error in Branch-\/and-\/\+Bound procedure while calculating the length of shortest non-\/zero vector. Return the figure of merit otherwise. \mbox{\Hypertarget{namespaceLatticeTester_aeb4b15313181b5065b236d87b7841093}\label{namespaceLatticeTester_aeb4b15313181b5065b236d87b7841093}}
\index{Lattice\+Tester@{Lattice\+Tester}!Figure\+Of\+Merit@{Figure\+Of\+Merit}}
\index{Figure\+Of\+Merit@{Figure\+Of\+Merit}!Lattice\+Tester@{Lattice\+Tester}}
\subsection{\texorpdfstring{Figure\+Of\+Merit()}{FigureOfMerit()}\hspace{0.1cm}{\footnotesize\ttfamily [2/2]}}
{\footnotesize\ttfamily double Lattice\+Tester\+::\+Figure\+Of\+Merit (\begin{DoxyParamCaption}\item[{\hyperlink{Types_8h_ab072659538661107e2bf108cff9bb60d}{B\+Mat}}]{matrix,  }\item[{\hyperlink{namespaceLatticeTester_ab747c1cbb0f5e47fef711b62327a8e90}{Norma\+Type}}]{normalizer\+Type,  }\item[{long}]{max\+Nodes\+BB,  }\item[{\hyperlink{namespaceLatticeTester_a191af830e61af769e233e1b03138520e}{Pre\+Reduction\+Type}}]{pre\+Red = {\ttfamily \hyperlink{namespaceLatticeTester_a191af830e61af769e233e1b03138520ea14aace9298ad3f3297ff86c30b8d34eb}{B\+KZ}},  }\item[{\hyperlink{namespaceLatticeTester_a94f96ff406f8b56147a2b7fd96209cb2}{Precision\+Type}}]{double\+Precision = {\ttfamily \hyperlink{namespaceLatticeTester_a94f96ff406f8b56147a2b7fd96209cb2a14b6ff7a5d157ffdfd9ab4d80d7f5ea6}{D\+O\+U\+B\+LE}},  }\item[{double}]{fact = {\ttfamily 0.999},  }\item[{int}]{blocksize = {\ttfamily 20} }\end{DoxyParamCaption})}



Same thing as before but with the possibility to set a different value for the variable max\+Nodes\+BB.

\mbox{\Hypertarget{namespaceLatticeTester_ade5067032184a0720897d52add657683}\label{namespaceLatticeTester_ade5067032184a0720897d52add657683}}
\index{Lattice\+Tester@{Lattice\+Tester}!Minkowski\+Reduction@{Minkowski\+Reduction}}
\index{Minkowski\+Reduction@{Minkowski\+Reduction}!Lattice\+Tester@{Lattice\+Tester}}
\subsection{\texorpdfstring{Minkowski\+Reduction()}{MinkowskiReduction()}\hspace{0.1cm}{\footnotesize\ttfamily [1/2]}}
{\footnotesize\ttfamily bool Lattice\+Tester\+::\+Minkowski\+Reduction (\begin{DoxyParamCaption}\item[{\hyperlink{Types_8h_ab072659538661107e2bf108cff9bb60d}{B\+Mat} \&}]{matrix,  }\item[{\hyperlink{namespaceLatticeTester_a191af830e61af769e233e1b03138520e}{Pre\+Reduction\+Type}}]{pre\+Red = {\ttfamily \hyperlink{namespaceLatticeTester_a191af830e61af769e233e1b03138520ea14aace9298ad3f3297ff86c30b8d34eb}{B\+KZ}},  }\item[{\hyperlink{namespaceLatticeTester_a94f96ff406f8b56147a2b7fd96209cb2}{Precision\+Type}}]{double\+Precision = {\ttfamily \hyperlink{namespaceLatticeTester_a94f96ff406f8b56147a2b7fd96209cb2a14b6ff7a5d157ffdfd9ab4d80d7f5ea6}{D\+O\+U\+B\+LE}},  }\item[{double}]{fact = {\ttfamily 0.999},  }\item[{int}]{blocksize = {\ttfamily 20} }\end{DoxyParamCaption})}



This function reduces a basis to a Minkowski-\/reduced basis.

Such basis has strong properties regarding the length of its vectors but will require a huge running time, especially when the dimension of the basis increases. Such Minkowski-\/reduced basis is usefull, for example, to calculate a Beyer quotient (as implemented in \hyperlink{namespaceLatticeTester_a70b2654f283deb28aaaf074503b3912e}{Figure\+Of\+Merit()}). \mbox{\Hypertarget{namespaceLatticeTester_aea8356711a561e1a85ee1aa638f8070e}\label{namespaceLatticeTester_aea8356711a561e1a85ee1aa638f8070e}}
\index{Lattice\+Tester@{Lattice\+Tester}!Minkowski\+Reduction@{Minkowski\+Reduction}}
\index{Minkowski\+Reduction@{Minkowski\+Reduction}!Lattice\+Tester@{Lattice\+Tester}}
\subsection{\texorpdfstring{Minkowski\+Reduction()}{MinkowskiReduction()}\hspace{0.1cm}{\footnotesize\ttfamily [2/2]}}
{\footnotesize\ttfamily bool Lattice\+Tester\+::\+Minkowski\+Reduction (\begin{DoxyParamCaption}\item[{\hyperlink{Types_8h_ab072659538661107e2bf108cff9bb60d}{B\+Mat} \&}]{matrix,  }\item[{long}]{max\+Nodes\+BB,  }\item[{\hyperlink{namespaceLatticeTester_a191af830e61af769e233e1b03138520e}{Pre\+Reduction\+Type}}]{pre\+Red = {\ttfamily \hyperlink{namespaceLatticeTester_a191af830e61af769e233e1b03138520ea14aace9298ad3f3297ff86c30b8d34eb}{B\+KZ}},  }\item[{\hyperlink{namespaceLatticeTester_a94f96ff406f8b56147a2b7fd96209cb2}{Precision\+Type}}]{double\+Precision = {\ttfamily \hyperlink{namespaceLatticeTester_a94f96ff406f8b56147a2b7fd96209cb2a14b6ff7a5d157ffdfd9ab4d80d7f5ea6}{D\+O\+U\+B\+LE}},  }\item[{double}]{fact = {\ttfamily 0.999},  }\item[{int}]{blocksize = {\ttfamily 20} }\end{DoxyParamCaption})}



Same thing as before but with the possibility to set a different value for the variable max\+Nodes\+BB.

\mbox{\Hypertarget{namespaceLatticeTester_a13ba55df4c2ca1007014c7349ad679d8}\label{namespaceLatticeTester_a13ba55df4c2ca1007014c7349ad679d8}}
\index{Lattice\+Tester@{Lattice\+Tester}!Shortest\+Vector@{Shortest\+Vector}}
\index{Shortest\+Vector@{Shortest\+Vector}!Lattice\+Tester@{Lattice\+Tester}}
\subsection{\texorpdfstring{Shortest\+Vector()}{ShortestVector()}\hspace{0.1cm}{\footnotesize\ttfamily [1/2]}}
{\footnotesize\ttfamily double Lattice\+Tester\+::\+Shortest\+Vector (\begin{DoxyParamCaption}\item[{\hyperlink{Types_8h_ab072659538661107e2bf108cff9bb60d}{B\+Mat}}]{matrix,  }\item[{\hyperlink{namespaceLatticeTester_a9770e4d57aa715e249cd7e700c6f37e4}{Norm\+Type}}]{norm,  }\item[{\hyperlink{namespaceLatticeTester_a191af830e61af769e233e1b03138520e}{Pre\+Reduction\+Type}}]{pre\+Red = {\ttfamily \hyperlink{namespaceLatticeTester_a191af830e61af769e233e1b03138520ea14aace9298ad3f3297ff86c30b8d34eb}{B\+KZ}},  }\item[{\hyperlink{namespaceLatticeTester_a94f96ff406f8b56147a2b7fd96209cb2}{Precision\+Type}}]{double\+Precision = {\ttfamily \hyperlink{namespaceLatticeTester_a94f96ff406f8b56147a2b7fd96209cb2a14b6ff7a5d157ffdfd9ab4d80d7f5ea6}{D\+O\+U\+B\+LE}},  }\item[{double}]{fact = {\ttfamily 0.999},  }\item[{int}]{blocksize = {\ttfamily 20} }\end{DoxyParamCaption})}



This function allows computation of the shortest non-\/zero vector in a lattice, according to the selected norm.

Many parameters can bet set by the user, otherwise the function work with default values. Returns -\/1.\+0 if there was an error in Branch-\/and-\/\+Bound procedure. Return the length of the shortest non-\/zero vector otherwise.

\mbox{\Hypertarget{namespaceLatticeTester_a163335d2c66ef11b6494eeddf06de8c9}\label{namespaceLatticeTester_a163335d2c66ef11b6494eeddf06de8c9}}
\index{Lattice\+Tester@{Lattice\+Tester}!Shortest\+Vector@{Shortest\+Vector}}
\index{Shortest\+Vector@{Shortest\+Vector}!Lattice\+Tester@{Lattice\+Tester}}
\subsection{\texorpdfstring{Shortest\+Vector()}{ShortestVector()}\hspace{0.1cm}{\footnotesize\ttfamily [2/2]}}
{\footnotesize\ttfamily double Lattice\+Tester\+::\+Shortest\+Vector (\begin{DoxyParamCaption}\item[{\hyperlink{Types_8h_ab072659538661107e2bf108cff9bb60d}{B\+Mat}}]{matrix,  }\item[{\hyperlink{namespaceLatticeTester_a9770e4d57aa715e249cd7e700c6f37e4}{Norm\+Type}}]{norm,  }\item[{long}]{max\+Nodes\+BB,  }\item[{\hyperlink{namespaceLatticeTester_a191af830e61af769e233e1b03138520e}{Pre\+Reduction\+Type}}]{pre\+Red = {\ttfamily \hyperlink{namespaceLatticeTester_a191af830e61af769e233e1b03138520ea14aace9298ad3f3297ff86c30b8d34eb}{B\+KZ}},  }\item[{\hyperlink{namespaceLatticeTester_a94f96ff406f8b56147a2b7fd96209cb2}{Precision\+Type}}]{double\+Precision = {\ttfamily \hyperlink{namespaceLatticeTester_a94f96ff406f8b56147a2b7fd96209cb2a14b6ff7a5d157ffdfd9ab4d80d7f5ea6}{D\+O\+U\+B\+LE}},  }\item[{double}]{fact = {\ttfamily 0.999},  }\item[{int}]{blocksize = {\ttfamily 20} }\end{DoxyParamCaption})}

Same thing as before but with the possibility to set a different value for the variable max\+Nodes\+BB.
\endlatexonly
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */
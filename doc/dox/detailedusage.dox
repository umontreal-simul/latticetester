/**
 * \page usage Usage instructions
 * \todo Reread this
 *
 * \section usage_build Compiling the Library
 *
 * \subsection usage_build_soft Software Dependencies
 * 
 * If you intend on building *LatticeTester* from scratch, the following
 * software will need to be installed on the system:
 * 
 * - [NTL](http://www.shoup.net/ntl/index.html) 10.4.0 or later
 * - [GMP](https://gmplib.org/) compatible version with your NTL installation
 * - [Python](https://www.python.org/) <i>(Needed by waf to build the program)</i>
 * - [Git](http://git-scm.com/) <i>(optional for downloading the source code)</i>
 * - [Doxygen](http://www.doxygen.nl/) <i>(optional for generating
 *   the documentation)</i>
 * 
 * You will also need a compiler compliant with the C++14 standard.
 * 
 * \subsection usage_build_build Acquiring/Building/Installing the program
 *
 * This section won't go in depth and explain all the particularities of the
 * build process. If you are a developper and wish to participate to this
 * project, please look at the [README](https://github.com/umontreal-simul/latticetester.git)
 * for more details about the build system.
 *
 * The prefered way of getting this software is by downloading it on github
 * (either via `git clone` or with a `.zip`) and to compile it yourself (for
 * now). The build process uses the `waf` metabuild system that greatly
 * streamlines the process.
 *
 * To build the project, you simply need to be in the root folder of 
 * *LatticeTester* and call:
 * \code
 * ./waf configure build install
 * \endcode
 * or, on Windows,
 * \code
 * python waf configure build install
 * \endcode
 * If the build process fails, the README might offer you some insight as to
 * what went wrong. Note that for the installation process to work, you will
 * need the have administrative rights on the installation folder.
 *
 * The previous command will fetch the environment variables specific to your
 * system to prepare the compilation, compile the program in a local folder and
 * place the binaries and header files in a default location depending on your
 * OS. Depending on your installation path, you might need to specify a path to
 * you compilier when using the *LatticeTester* library. After that, the
 * library will be available under the `lib` folder in the installation path
 * and the executable program under the `bin` folder as `LatticeTester`(`.exe` 
 * on Windows).
 *
 * \subsection Types Types and representations
 *
 * *LatticeTester* uses NTL's types and implementations of a few algorithms.
 * If you ever happen to browse the code of *LatticeTester*, you will notice that
 * many of the classes use templates. This is because the library is compiled
 * to work on a variety of types with the same code. These types provide a
 * variable precision in the representation of both integer numbers and floating
 * point numbers.
 *
 * It is possible to use integers represented as both
 * `std::int64_t' (integers of exactly 64 bits) and `NTL::ZZ` (NTL
 * implementation of exact arbitrary length integers) and floating points as
 * `double` and `NTL::RR` (NTL implementation of arbitrary precision floating
 * point numbers). Obviously, standard types provide better performance, but
 * can lead to errors in a few algorithms.
 *
 * When using the library, you will have to consider which types you will want
 * to use to represent numbers. While it is quite safe to assume floating point
 * arithmetic should not cause problems and that `double`s should be fine, this
 * is not true for integers. This is because the computations performed on
 * lattices basis need to be done exactly on integers. Using arbitrary precision
 * integers is necessary when working with matrix entries that can get close to
 * \f$2^{63}\f$. This is the case, for example, in
 * [LatMRG](https://github.com/savamarc/LatMRG) when working with generators with
 * modulus close to \f$2^{64}\f$.
 * 
 * \section usage_program Using the executable
 *
 * *LatticeTester* is built in order to analyse a Lattice based on a set
 * of vectors called *basis* therefore it provides an executable that can
 * be used directly to do so at a small scale. This executable is a small
 * program that can read data from a file to perform tests as specified by the
 * user. Through this program, all the problems *LatticeTester* aims at solving
 * can be addressed, as well as the computation of figures of merit. Although,
 * concerns for the efficiency of object instanciation when using
 * *LatticeTester* are not needed (since it should not take a large proportion
 * of the execution time), it is recommended that, if you want to perform
 * tests or algorithms on numerous lattices, you make a C++ program using the
 * library instead of sending multiple files to the executable.
 *
 * Once the program is compiled, to use it, you simply have to call it from a
 * command line with a filename argument. That file name must have a `.dat`
 * extension that should not be included when calling the program like
 * \code
 * ./TestLattice <LLDD,ZZDD,ZZRR> filename
 * \endcode
 * in a POSIX shell.
 * You can specify a directory relative to your current working directory for
 * either of the program and the executable.
 * `LLDD`, `ZZDD` and `ZZRR` are integer type specifiers. For more information
 * on the type usage, please look into `Types`. For most use cases, `ZZDD`
 * should do the trick, or will be needed since a few functions only need with
 * `ZZ` integers.
 *
 * The file must contain, in order:
 * - A test or computation to be performed
 * - Parameters for that test/computation
 * - A matrix that generates or is a basis of that lattice to work on. Each line
 *   of this matrix must be a vector of the lattice.
 *
 * The file format depends on the work you ask from *LatticeTester*. There is an
 * example available for each case in the folder `inputTestFiles` in the
 * repository.
 * There are 5 computations possible when calling *LatticeTester*. In what
 * follows, we present them and explain what each parameter is. Parameters are
 * written in the format `parameter <option1, option2, ...>` if you need to
 * choose from multiple options or in the format `parameter [type]` if it is a
 * basic type. When writing a parameter, you just have to write the
 * choosen option and not the parameter name.
 *
 * \subsection Basis Basis Construction
 * 
 * This is the simplest case, where the file looks like this.
 * \code
 * BASIS
 * Method <LLL, GCD>
 * Output <RES, TERM>
 * NumRows [int] NumCols [int]
 * Matrix [NumRows*NumCols int type array]
 * \endcode
 * - **BASIS** is the first line indicating the computation to be done. In that
 *   case, it means basis construction.
 * - **Method** is the construction method.
 *   - **LLL** performs *LLL* reduction and removes dependent vectors as the
 *     basis is constructed. This is the recommanded method.
 *   - **GCD** transforms the matrix in a triangular one while removing unwanted
 *     vectors. This method can be unstable on large matrices.
 * - **Output** is the output wanted.
 *   - **RES** means *results file*. The results will be printed in a file with
 *     the same name as the input file with a `.res` extension.
 *   - **TERM** means *terminal*. The results will be printed on the command
 *     line
 * - **NumRows** and **NumCols** are integers representing the dimensions of the
 *   input matrix
 * - **Matrix** is a `NumRows`\f$\times\f$`NumCols` matrix where each line
 *   represents a vector of the lattice. This matrix does not need to be
 *   non-singular or have full rank.
 *
 * \subsection Dual Dual Construction
 *
 * In that case, the file will look like this :
 * \code
 * DUAL
 * Output <RES, TERM>
 * Dim [int]
 * Matrix [Dim*Dim int type array]
 * \endcode
 * - **DUAL** is the first line indicating the computation to be done. In that
 *   case, it means dual construction.
 * - **Output** is the output wanted.
 *   - **RES** means *results file*. The results will be printed in a file with
 *     the same name as the input file with a `.res` extension.
 *   - **TERM** means *terminal*. The results will be printed on the command
 *     line
 * - **Dim** is the dimension of the input matrix. To build the dual, this
 *   matrix has to be square.
 * - **Matrix** is a `Dim`\f$\times\f$`Dim` matrix where each line
 *   represents a vector of the lattice. This matrix must be invertible.
 *
 * \subsection Lattice Lattice Reduction
 *
 * In that case, the file will look like this :
 * \code
 * REDUCTION
 * Method <Dieter, LLL, BKZ>
 * Output <RES, TERM>
 * Dim [int]
 * Matrix [Dim*Dim int type array]
 * \endcode
 * - **REDUCTION** is the first line indicating the computation to be done. In
 *   that case, it means lattice reduction.
 * - **Method** is the method of lattice reduction to use. All the reductions
 *   will be performed with the default parameters. If the results are not
 *   conclusive because of that, it will be needed to write a short program
 *   to change them. For more detail than below on the methods look at the
 *   Reducer class.
 *   - **DIETER** is the pairwise reduction proposed by Dieter. It is the least
 *     strong reduction.
 *   - **LLL** is the classic *Lenstra-Lenstra-Lovasz* reduction. It is fast and
 *     efficient. It is a good starting point for most applications needing
 *     reduction
 *   - **BKZ** is the block *Korkine-Zolotarev* reduction. It is a bit stronger
 *     than LLL reduction but more costly. It is recommended on applications
 *     for which the reduction is critical.
 * - **Output** is the output wanted.
 *   - **RES** means *results file*. The results will be printed in a file with
 *     the same name as the input file with a `.res` extension.
 *   - **TERM** means *terminal*. The results will be printed on the command
 *     line
 * - **Dim** is the dimension of the input matrix. In theory, it is not
 *    necessary that this matrix be square, but *LatticeTester* will not reduce
 *    a non-square matrix.
 * - **Matrix** is a `Dim`\f$\times\f$`Dim` matrix where each line
 *   represents a vector of the lattice. This matrix must be invertible.
 *
 * \subsection Shortest Shortest Vector Research
 *
 * In that case, the file will look like this :
 * \code
 * SHORTEST
 * Reduction [bool] Type <Dieter, LLL, BKZ>
 * Output <RES, TERM>
 * Dim [int]
 * Matrix [Dim*Dim int type array]
 * \endcode
 * - **SHORTEST** is the first line indicating the computation to be done. In
 *   that case, it means finding the shortest vector
 * - **Reduction** allows the user to perform a lattice basis reduction prior to
 *   the shortest vector research. It is recommended that this flag be set to
 *   `true`.
 * - **Type** is the type of reduction to use if *Reduction* is set to `true`.
 *   This field is not needed if *Reduction* is `false`. Look at \ref Lattice
 *   for more details.
 * - **Error** is a factor indicating the tolerance for error. If error is
 *   set to \f$\alpha\f$, the shortest vector returned by this algorithm will
 *   have a length that is at most \f$1 + \alpha\f$ times the length of the true
 *   shortest vector. This can be set to 0 to obtain the true shortest vector.
 *   If this is non-zero, the program will be slower because of the checks that
 *   will occur.
 * - **Output** is the output wanted.
 *   - **RES** means *results file*. The results will be printed in a file with
 *     the same name as the input file with a `.res` extension.
 *   - **TERM** means *terminal*. The results will be printed on the command
 *     line
 * - **Dim** is the dimension of the input matrix. In theory, it is not
 *    necessary that this matrix be square, but *LatticeTester* will not accept
 *    a non-square matrix for this problem.
 * - **Matrix** is a `Dim`\f$\times\f$`Dim` matrix where each line
 *   represents a vector of the lattice. This matrix must be invertible.
 *
 * \subsection Figure Figure of Merit Computation
 *
 * In that case, the file will look like this :
 * \code
 * MERIT
 * Figure <SPECTRAL, BEYER>
 * Normalizer <NONE, BESTBOUND, BESTLAT, LAMINATED, MINK>
 * Reduction [bool] Type <Dieter, LLL, BKZ> 
 * Output <RES, TERM>
 * Dim [int]
 * Matrix [Dim*Dim int type array]
 * \endcode
 * - **MERIT** is the first line indicating the computation to be done. In
 *   that case, it means computing a figure of merit.
 * - **Figure** is the figure of merit to compute.
 *   - **SPECTRAL** stands for *spectral test*. This will compute the shortest
 *     vector in the lattice and return a normalized value depending on its
 *     length.
 *   - **BEYER** stands for *Beyer* quotient. This will find a Minkowski reduced
 *     basis and compute the ratio between the longest and the shortest vector
 *     in this basis.
 * - **Normalizer** is an option to allow the normalization of the figure of
 *   merit so that it can be compared with the value from other lattices.
 *   - **NONE** no normalization is done. This will return the length of the
 *     shortest vector for the spectral test. This is what should be used for
 *     the Beyer quotient.
 *   - **BESTBOUND** is the best upper bound for the length of the shortest
 *     vector in a lattice based on what is in the litterature.
 *   - **BESTLAT** is an "upper" bound on the length of the shortest vector in
 *     a lattice based on the densest lattice known. This is the recommended
 *     option.
 *   - **LAMINATED** is an upper bound on the length of the shortest vector in a
 *     lattice based on the densest laminated lattice known.
 *   - **MINK** is Minkowski's LOWER bound on the shortest vector in a lattice.
 * - **Reduction** allows the user to perform a lattice basis reduction prior to
 *   other computations. It is recommended that this flag be set to `true`.
 * - **Type** is the type of reduction to use if *Reduction* is set to `true`.
 *   This field is not needed if *Reduction* is `false`. Look at \ref Lattice
 *   for more details.
 * - **Output** is the output wanted.
 *   - **RES** means *results file*. The results will be printed in a file with
 *     the same name as the input file with a `.res` extension.
 *   - **TERM** means *terminal*. The results will be printed on the command
 *     line
 * - **Dim** is the dimension of the input matrix. In theory, it is not
 *    necessary that this matrix be square, but *LatticeTester* will not reduce
 *    a non-square matrix.
 * - **Matrix** is a `Dim`\f$\times\f$`Dim` matrix where each line
 *   represents a vector of the lattice. This matrix must be invertible.
 *
 * */

The main analysis is the Spectral Test
(with L2 or L1 Norm), but one can also use Beyer Test and the
\f$\mathcal{P}_\alpha\f$ test (still in construction) according to
a given normalization.

To perform each analysis, the shortest vector of the lattice
has to be computed. LatticeTester implements a *Branch and Bound*
algorithm according to \cite rKNU98a which returns the shortest
vector of the lattice with an exponential time. To reduce this
time, the user can precise a prereduction that they want to
use among the following :

- *Pre-reduction of Dieter* according to \cite rDIE75a. Perform
pair-wise reduction in the primal lattice and the dual lattice
in order to reduce each vector of the basis. It is efficient for
small dimension (less than 10)
- *LLL* according to \cite mLEN82a. It returns a reduced
basis where its shortest vector \f$x_0\f$ has a fixed approximation
of the shortest vector of the basis \f$x\f$ : \f$ \|x\| < \left(
\frac{2}{\sqrt{3}} \right)^{n} \|x_{0}\| \f$ where \f$n\f$ is the
dimension.
- *BKZ* according to \cite mSCH91a. It strengthens the condition of *LLL*, 
but is more costly to compute. It is efficient in greater dimensions.

After one of theses prereductions, the Branch and Bound find the
shortest vector of the lattice and returns the wanted figure of
merit.

 <center><div class="LatSoft-fbox">\image html datafile.png "Data file format for LatticeTester." width=700px
\anchor REF__LatticeTester_dat
 </div></center>


\latexonly
\begin{center}
\fbox{
\begin{minipage}{0.8\textwidth}
\begin{minipage}{0.9\textwidth}
\vspace{10pt}
\begin{itemize}

\item [-] Figure of Merit <Normalization> ~ {\footnotesize $[$SPECTRAL <BESTLAT, LAMINATED, ROGERS, MINKOWSKI, MINKL1,
PALPHA\_N, NORMA\_GENERIC> , BEYER, L1, L2$]$ }

\item [-] Pre-reduction Type <Precision> <Fact> <Blocksize> ~ {\footnotesize $[$LenstraLL <DOUBLE, QUADRUPLE, XDOUBLE, RR> <double>, BKZ <DOUBLE, QUADRUPLE, XDOUBLE, RR> <double> <int>, PreRedDieter$]$ }

\item [-] Matrix Dimension ~ {\footnotesize $[$int$]$ }

\item [-] $ \begin{pmatrix}

     a_{11}   & \ldots & a_{1n} \\

     \vdots & \ddots &\vdots \\

     a_{n1}  & \ldots & a_{nn} \\

\end{pmatrix} $

\item [-] Max Nodes in Branch-and-Bound ~ {\footnotesize $[$int$]$ }

\item [-] Output Type ~ {\footnotesize $[$TERMINAL, RES, TEX, GEN$]$ } \\

\end{itemize}
\vspace{10pt}
\end{minipage}
\end{minipage}
}
\end{center}
\vspace{5pt}

\endlatexonly

The data for *LatticeTester* must be placed in a file with extension
<tt>".dat"</tt>, according to the format displayed on the figure above. 
The fields in square brackets are optional (depending on the value taken by
the first field on the line). The meaning of all data fields is explained
below. To run the program, type 
<tt>.\\lattest*</tt> <em>file</em>, where *file*
is the name of the data file, without extension, and <tt>lattest*</tt> is one
of the three program : <tt>lattestLLDD</tt>, <tt>lattestZZDD</tt>, <tt>lattestZZRR</tt>. The results will
be in a file with the same name, with extension (<tt>".res"</tt> or <tt>".tex"</tt> or <tt>".gen"</tt>)
(see *OutputType* in module \ref Const.h).

Comments may be inserted after data, on the same line, separated from the
data by at least one blank. Moreover, any line starting with "#" is
considered as a comment and is discarded by the reading program.

The values of \f$m\f$ in the data file can be
given in one of the two following formats:

<dl><dt>a)</dt>
<dd>
An integer giving the value directly, in base 10. In this case, there
*must* be some other non-numeric text (e.g., a comment) on this data line
after the integer.
</dd>
<dt>b)</dt>
<dd>
Three integers \f$x\f$, \f$e\f$, and \f$z\f$ on the same line, separated
by at least one blank. The retained value will be \f$x^e+z\f$ if
\f$x\ge0\f$, and \f$-(|x|^e+z)\f$ if \f$x<0\f$. The value of \f$e\f$ must
be positive. For example, \f$(x e z) = (2 5 -1)\f$ will give 31, while
\f$(x e z) = (-2 5 -1)\f$ will give \f$-31\f$ (not \f$-33\f$).
</dd>
</dl>


*  For the program <tt>seekLLDD</tt>, all these numbers must fit in a
<tt>long</tt>. For larger numbers, one must use the programs
<tt>seekZZDD</tt> or <tt>seekZZRR</tt>.

## Meaning of the data fields

<dl><dt><em>Figure of Merit</em>:</dt>
<dd>
Specifies the merit criterion for ranking the generators for each
category. The admissible values of *Criterion* are:

<dl><dt><tt>Beyer</tt>:</dt>
<dd>
means that the program will return the ratio between the norm of
shortest vector and the norm of the longest vector in the Minkowski
reduced basis.
</dd>
<dt><tt>Spectral</tt>:</dt>
<dd>
means that the program will perform a Spectral Test on the lattice
It will returns a figure of merit accoding to a certain norm.
</dd>
</dl>
</dd>

<dt><em>Normalizer</em>:</dt>
<dd>
If *Figure of Merit* is <tt>Spectral</tt>, then *Normalizer* must appear and it
indicates which type of normalization is used in the normalization.
 The admissible values are :

<dl><dt><tt>BestLat</tt>:</dt>
<dd>
means that we use for \f$d_t^*\f$ the value of \f$d_t\f$ that corresponds
to the best lattice in dimension \f$t\f$. Only values for
\f$t\le48\f$ are known.
</dd>
<dt><tt>Laminated</tt>:</dt>
<dd>
means that we use for \f$d_t^*\f$ the value of \f$d_t\f$ that corresponds
to the best laminated lattice in dimension \f$t\f$. Only values for
\f$t\le48\f$ are known.
</dd>
<dt><tt>Rogers</tt>:</dt>
<dd>
means that \f$d_t^*\f$ is obtained from Rogers’ bound.
</dd>
<dt><tt>Minkowski</tt>:</dt>
<dd>
means that we use for \f$d_t^*\f$ *Minkowski*’s theoretical bounds on the
length of the shortest nonzero vector in a lattice. Only values for
\f$t\le48\f$ have been precomputed.
</dd>
<dt><tt>MinkL1</tt>:</dt>
<dd>
means that length of vectors is computed using the
\f${\mathcal{L}}_1\f$ norm. Here, the length of the shortest nonzero
vector gives the minimal number of hyperplanes that cover all the points
of the lattice. Only values for \f$t\le48\f$ have been precomputed.
</dd>
<dt><tt>L1</tt>:</dt>
<dd>
means that the program will return the shortest vector according
to the \f${\mathcal{L}}_1\f$ norm.
</dd>
<dt><tt>L2</tt>:</dt>
<dd>
means that the program will return the shortest vector according
to the \f${\mathcal{L}}_2\f$ norm.
</dd>
</dl>
</dd>

<dt><em>Pre-Reduction Type</em>:</dt>
<dd>
Because of his exponential time which depends on dimension and
the basis, the Branch and Bound can not be apply directly on the
basis of the lattice. A pre-reduction can be apply before to reduce
the computing time, specially in high dimension (more than 10)

<dl><dt><tt>Dieter pre-reduction</tt>:</dt>
<dd> Performs pair-wise reduction in polynomial time
in order to reduce each vector of the basis. It is efficient for
small dimension (less than 10) but takes more time for higher
dimension and leads to more time for the Branch-and-Bound thereafter.

<dt><tt>Lenstra and Al.</tt>:</dt>
<dd>
Produce a basis in polynomial time where the shortest vector bounds
the shortest vector of the lattice.
</dd>
<dt><tt>BKZ</tt>:</dt>
<dd>
This reduction is between the Lenstra and Al. pre-reduction and the
HKZ reduction where the difinition can be found here : [CITE HKZ].
Some analysis have prooved that, over random lattices, this pre-reduction
lead to a shorter time for the Branch and Bound [SEE ANALYSIS]
</dd>
<dt><tt>NOPRERED</tt>:</dt>
<dd>
No Prereduction before the Branch-and-Bound. This option can lead to
long time for dimension up to 10.
</dd>
</dl>
</dd>

Here is a graph comparing the time for each prereduction.

 \image html 5.png "Exemple comparing Branch and Bound computing time (logarithm scaled) fonction of dimension and after different pre-reductions. This test was perform over the same set of random matrix (100 matrix)" width=700px

\image latex 5.png "Exemple comparing Branch and Bound computing time (logarithm scaled) fonction of dimension and after different pre-reductions. This test was perform over the same set of random matrix (100 matrix)" width=500px


<dt><em>Precision</em>:</dt>
<dd>
The algorithmes BKZ and Lentra And Al. are implemented in the NTL
Library. LatticeTester use this library and offer the possibility
to the user to select the precision in NTL for these algorithm.
Generally speaking, the choice FP will be the fastest but may be
be prone to roundoff errors and/or overflow.

<dl><dt><tt>Double</tt>:</dt>
<dd>
Calculs are performed with double.
</dd>
<dt><tt>Quadruple</tt>:</dt>
<dd>
Quasi quadruple precision. This is usefull when roundoff
can cause problems.
</dd>
<dt><tt>Exponent</tt>:</dt>
<dd>
Extended exponent doubles. Useful when number get too big.
</dd>
<dt><tt>Arbitrary</tt>:</dt>
<dd>
Arbitrary precision floating point. This is useful for large
precision and magnitudes. But the computing time is higher.
</dd>
<dt><tt>Exact</tt>:</dt>
<dd>
Arbitrary precision floating point. This is useful for large
precision and magnitudes. But the computing time is higher.
</dd>
</dl>
</dd>

 \image html 2.png "Exemple comparing Lenstra and Al. pre-reduction computing time (logarithm scaled) fonction of dimension and precision. This test was perform over the same set of random matrix (100 matrix)" width=700px

\image latex 2.png "Exemple comparing Lenstra and Al. pre-reduction computing time (logarithm scaled) fonction of dimension and precision. This test was perform over the same set of random matrix (100 matrix)" width=500px

<dt><em>Fact</em>:</dt>
<dd>
A double value representing \f$fact = 1 - \epsilon\f$ in
the BKZ and Lentra And Al. pre-reduction. It must be only
precise in the case of BKZ or LenstraLL reduction. The more fact is close to
1, the more pre-reduction will take time but the basis will be more reduced
and the branch-and-bound will take less time.
</dd>

\image html 7.png "Exemple comparing Branch-and-Bound computing time (logarithm scaled) fonction of dimension. Here fact is equal to 0.9999. This test was perform over the same set of random matrix (100 matrix)" width=700px

\image html 8.png "Exemple comparing Branch-and-Bound computing time (logarithm scaled) fonction of dimension. Here fact is equal to 0.5. This test was perform over the same set of random matrix (100 matrix)" width=700px


\image latex 7.png "Exemple comparing Branch-and-Bound computing time (logarithm scaled) fonction of dimension. Here fact is equal to 0.9999. This test was perform over the same set of random matrix (100 matrix)" width=500px

\image latex 8.png "Exemple comparing Branch-and-Bound computing time (logarithm scaled) fonction of dimension. Here fact is equal to 0.5. This test was perform over the same set of random matrix (100 matrix)" width=500px


<dt><em>Matrix dimension</em>:</dt>
<dd>
A int value representing the dimension of the input lattice.
The test will be perform only for this dimension.
</dd>

<dt><em>Matrix Coefficients</em>:</dt>
<dd>
int or ZZ values depending the program <tt>.\\lattest*</tt>.
They must be separed only ba a space and a back space after each line.
</dd>

<dt><em>MaxNodesBB</em>:</dt>
<dd>
An integer giving the maximum number of nodes to be examined in the
branch-and-bound procedure when computing a figure of merit. When
that value is exceeded, the branch-and-bound is stopped and the program
is ended.
</dd>

<dt><em>Output Form</em>:</dt>
<dd>
Selects on which output the results will be written. The possible values
are <tt>(Terminal, RES, TEX)</tt>. Lowercases are also allowed.

<dl><dt><tt>Terminal</tt>:</dt>
<dd>
the results will be written on the terminal screen.
</dd>
<dt><tt>Res</tt>:</dt>
<dd>
the results are sent to a file with the same name as the data file, but
with extension <tt>.res</tt>.
</dd>
<dt><tt>Tex</tt>:</dt>
<dd>
the results are written in a file intended for LaTeX, with extension
<tt>.tex</tt>.
</dd>
</dl>
</dd>

</dl>


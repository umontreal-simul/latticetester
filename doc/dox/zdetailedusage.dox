/**
 * \page detailed_usage Detailed usage instructions for the programs
 *
 * *LatticeTester* is built in order to analyse a Lattice based on a set
 * of vectors called *basis*. The main analysis is the Spectral Test
 * (with L2 or L1 Norm), but one can also use Beyer Test and the
 * \f$\mathcal{P}_\alpha\f$ test (still in construction) according to
 * a given normalization.
 *
 * To perform each analysis, the shortest vector of the lattice
 * has to be computed. LatticeTester implements a *Branch and Bound*
 * algorithm according to [CITE KNUTH] which returns the shortest
 * vector of the lattice with an exponential time. To reduce this
 * time, the user can precise a prereduction that he wants to
 * use among the following :
 *
 * - *Pre-reduction of Dieter* according to [CITE DIETER]. Perform
 * pair-wise reduction in the primal lattice and the dual lattice
 * in order to reduce each vector of the basis. It is efficient for
 * small dimension (less than 10)
 * - *LLL* according to [CITE LENSTRA and AL.]. It returns a reduced
 * basis where its shortest vector \f$x_0\f$ has a fixed approximation
 * of the shortest vector of the basis \f$x\f$ : \f$ \|x\| < \left(
 * \frac{2}{\sqrt{3}} \right)^{n} \|x_{0}\| \f$ where \f$n\f$ is the
 * dimension.
 * - *BKZ* according to [CITE BKZ].
 *
 * After one of theses prereductions, the Branch and Bound find the
 * shortest vector of the lattice and returns the wanted figure of
 * merit.
 *
 *  <center><div class="LatSoft-fbox">\image html datafile.png "Data file format for LatticeTester." width=700px
 * \anchor REF__LatticeTester_dat
 *  </div></center>
 *
 *
 * \latexonly
 * \begin{center}
 * \fbox{
 * \begin{minipage}{0.8\textwidth}
 * \begin{minipage}{0.9\textwidth}
 * \vspace{10pt}
 * \begin{itemize}
 *
 * \item [-] Figure of Merit <Normalization> ~ {\footnotesize $[$SPECTRAL <BESTLAT, LAMINATED, ROGERS, MINKOWSKI, MINKL1,
 * PALPHA\_N, NORMA\_GENERIC> , BEYER, L1, L2$]$ }
 *
 * \item [-] Pre-reduction Type <Precision> <Fact> <Blocksize> ~ {\footnotesize $[$LenstraLL <DOUBLE, QUADRUPLE, EXPONENT, ARBITRARY> <double>, BKZ <DOUBLE, QUADRUPLE, EXPONENT, ARBITRARY> <double> <int>, PreRedDieter$]$ }
 *
 * \item [-] Matrix Dimension ~ {\footnotesize $[$int$]$ }
 *
 * \item [-] $ \begin{pmatrix}
 *
 *      a_{11}   & \ldots & a_{1n} \\
 *
 *      \vdots & \ddots &\vdots \\
 *
 *      a_{n1}  & \ldots & a_{nn} \\
 *
 * \end{pmatrix} $
 *
 * \item [-] Max Nodes in Branch-and-Bound ~ {\footnotesize $[$int$]$ }
 *
 * \item [-] Output Type ~ {\footnotesize $[$TERMINAL, RES, TEX, GEN$]$ } \\
 *
 * \end{itemize}
 * \vspace{10pt}
 * \end{minipage}
 * \end{minipage}
 * }
 * \end{center}
 * \vspace{5pt}
 *
 * \endlatexonly
 *
 *
 * The data for *LatticeTester* must be placed in a file with extension
 * <tt>".dat"</tt>, according to the format displayed on Figure
 * \link REF__LatticeTester_dat latdata.dat\endlink. The fields in square brackets
 * are optional (depending on the value taken by the first field on the
 * line). The meaning of all data fields is explained below. To run the
 * program, type <tt>&quot;.\\lattest*</tt> &lt;<em>file</em>&gt;<tt>&quot;</tt>, where &lt;*file*&gt;
 * is the name of the data file, without extension, and <tt>lattest*</tt> is one
 * of the three program : <tt>lattestLLDD</tt>, <tt>lattestZZDD</tt>, <tt>lattestZZRR</tt>. The results will
 * be in a file with the same name, with extension (<tt>".res"</tt> or <tt>".tex"</tt> or <tt>".gen"</tt>)
 * (see *OutputType* in module \ref Const.h).
 *
 * Comments may be inserted after data, on the same line, separated from the
 * data by at least one blank. Moreover, any line starting with "#" is
 * considered as a comment and is discarded by the reading program.
 *
 * The values of \f$m\f$ in the data file can be
 * given in one of the two following formats:
 *
 * <dl><dt>a)</dt>
 * <dd>
 * An integer giving the value directly, in base 10. In this case, there
 * *must* be some other non-numeric text (e.g., a comment) on this data line
 * after the integer.
 * </dd>
 * <dt>b)</dt>
 * <dd>
 * Three integers \f$x\f$, \f$e\f$, and \f$z\f$ on the same line, separated
 * by at least one blank. The retained value will be \f$x^e+z\f$ if
 * \f$x\ge0\f$, and \f$-(|x|^e+z)\f$ if \f$x<0\f$. The value of \f$e\f$ must
 * be positive. For example, \f$(x e z) = (2 5 -1)\f$ will give 31, while
 * \f$(x e z) = (-2 5 -1)\f$ will give \f$-31\f$ (not \f$-33\f$).
 * </dd>
 * </dl>
 *
 *
 * *  For the program <tt>seekLLDD</tt>, all these numbers must fit in a
 * <tt>long</tt>. For larger numbers, one must use the programs
 * <tt>seekZZDD</tt> or <tt>seekZZRR</tt>.
 *
 * ## Meaning of the data fields
 *
 * <dl><dt><em>Figure of Merit</em>:</dt>
 * <dd>
 * Specifies the merit criterion for ranking the generators for each
 * category. The admissible values of *Criterion* are:
 *
 * <dl><dt><tt>Beyer</tt>:</dt>
 * <dd>
 * means that the program will return the ratio between the norm of
 * shortest vector and the norm of the longest vector in the Minkowski
 * reduced basis.
 * </dd>
 * <dt><tt>Spectral</tt>:</dt>
 * <dd>
 * means that the program will perform a Spectral Test on the lattice
 * It will returns a figure of merit accoding to a certain norm.
 * </dd>
 * </dl>
 * </dd>
 *
 * <dt><em>Normalizer</em>:</dt>
 * <dd>
 * If *Figure of Merit* is <tt>Spectral</tt>, then *Normalizer* must appear and it
 * indicates which type of normalization is used in the normalization.
 *  The admissible values are :
 *
 * <dl><dt><tt>BestLat</tt>:</dt>
 * <dd>
 * means that we use for \f$d_t^*\f$ the value of \f$d_t\f$ that corresponds
 * to the best lattice in dimension \f$t\f$. Only values for
 * \f$t\le48\f$ are known.
 * </dd>
 * <dt><tt>Laminated</tt>:</dt>
 * <dd>
 * means that we use for \f$d_t^*\f$ the value of \f$d_t\f$ that corresponds
 * to the best laminated lattice in dimension \f$t\f$. Only values for
 * \f$t\le48\f$ are known.
 * </dd>
 * <dt><tt>Rogers</tt>:</dt>
 * <dd>
 * means that \f$d_t^*\f$ is obtained from Rogers’ bound.
 * </dd>
 * <dt><tt>Minkowski</tt>:</dt>
 * <dd>
 * means that we use for \f$d_t^*\f$ *Minkowski*’s theoretical bounds on the
 * length of the shortest nonzero vector in a lattice. Only values for
 * \f$t\le48\f$ have been precomputed.
 * </dd>
 * <dt><tt>MinkL1</tt>:</dt>
 * <dd>
 * means that length of vectors is computed using the
 * \f${\mathcal{L}}_1\f$ norm. Here, the length of the shortest nonzero
 * vector gives the minimal number of hyperplanes that cover all the points
 * of the lattice. Only values for \f$t\le48\f$ have been precomputed.
 * </dd>
 * <dt><tt>L1</tt>:</dt>
 * <dd>
 * means that the program will return the shortest vector according
 * to the \f${\mathcal{L}}_1\f$ norm.
 * </dd>
 * <dt><tt>L2</tt>:</dt>
 * <dd>
 * means that the program will return the shortest vector according
 * to the \f${\mathcal{L}}_2\f$ norm.
 * </dd>
 * </dl>
 * </dd>
 *
 * <dt><em>Pre-Reduction Type</em>:</dt>
 * <dd>
 * Because of his exponential time which depends on dimension and
 * the basis, the Branch and Bound can not be apply directly on the
 * basis of the lattice. A pre-reduction can be apply before to reduce
 * the computing time, specially in high dimension (more than 10)
 *
 * <dl><dt><tt>Dieter pre-reduction</tt>:</dt>
 * <dd> Performs pair-wise reduction in polynomial time
 * in order to reduce each vector of the basis. It is efficient for
 * small dimension (less than 10) but takes more time for higher
 * dimension and leads to more time for the Branch-and-Bound thereafter.
 *
 * <dt><tt>Lenstra and Al.</tt>:</dt>
 * <dd>
 * Produce a basis in polynomial time where the shortest vector bounds
 * the shortest vector of the lattice.
 * </dd>
 * <dt><tt>BKZ</tt>:</dt>
 * <dd>
 * This reduction is between the Lenstra and Al. pre-reduction and the
 * HKZ reduction where the difinition can be found here : [CITE HKZ].
 * Some analysis have prooved that, over random lattices, this pre-reduction
 * lead to a shorter time for the Branch and Bound [SEE ANALYSIS]
 * </dd>
 * <dt><tt>NOPRERED</tt>:</dt>
 * <dd>
 * No Prereduction before the Branch-and-Bound. This option can lead to
 * long time for dimension up to 10.
 * </dd>
 * </dl>
 * </dd>
 *
 * Here is a graph comparing the time for each prereduction.
 *
 *  \image html 5.png "Exemple comparing Branch and Bound computing time (logarithm scaled) fonction of dimension and after different pre-reductions. This test was perform over the same set of random matrix (100 matrix)" width=700px
 *
 * \image latex 5.png "Exemple comparing Branch and Bound computing time (logarithm scaled) fonction of dimension and after different pre-reductions. This test was perform over the same set of random matrix (100 matrix)" width=500px
 *
 *
 * <dt><em>Precision</em>:</dt>
 * <dd>
 * The algorithmes BKZ and Lentra And Al. are implemented in the NTL
 * Library. LatticeTester use this library and offer the possibility
 * to the user to select the precision in NTL for these algorithm.
 * Generally speaking, the choice FP will be the fastest but may be
 * be prone to roundoff errors and/or overflow.
 *
 * <dl><dt><tt>Double</tt>:</dt>
 * <dd>
 * Calculs are performed with double.
 * </dd>
 * <dt><tt>Quadruple</tt>:</dt>
 * <dd>
 * Quasi quadruple precision. This is usefull when roundoff
 * can cause problems.
 * </dd>
 * <dt><tt>Exponent</tt>:</dt>
 * <dd>
 * Extended exponent doubles. Useful when number get too big.
 * </dd>
 * <dt><tt>Arbitrary</tt>:</dt>
 * <dd>
 * Arbitrary precision floating point. This is useful for large
 * precision and magnitudes. But the computing time is higher.
 * </dd>
 * <dt><tt>Exact</tt>:</dt>
 * <dd>
 * Arbitrary precision floating point. This is useful for large
 * precision and magnitudes. But the computing time is higher.
 * </dd>
 * </dl>
 * </dd>
 *
 *  \image html 2.png "Exemple comparing Lenstra and Al. pre-reduction computing time (logarithm scaled) fonction of dimension and precision. This test was perform over the same set of random matrix (100 matrix)" width=700px
 *
 * \image latex 2.png "Exemple comparing Lenstra and Al. pre-reduction computing time (logarithm scaled) fonction of dimension and precision. This test was perform over the same set of random matrix (100 matrix)" width=500px
 *
 * <dt><em>Fact</em>:</dt>
 * <dd>
 * A double value representing \f$fact = 1 - \epsilon\f$ in
 * the BKZ and Lentra And Al. pre-reduction. It must be only
 * precise in the case of BKZ or LenstraLL reduction. The more fact is close to
 * 1, the more pre-reduction will take time but the basis will be more reduced
 * and the branch-and-bound will take less time.
 * </dd>
 *
 * \image html 7.png "Exemple comparing Branch-and-Bound computing time (logarithm scaled) fonction of dimension. Here fact is equal to 0.9999. This test was perform over the same set of random matrix (100 matrix)" width=700px
 *
 * \image html 8.png "Exemple comparing Branch-and-Bound computing time (logarithm scaled) fonction of dimension. Here fact is equal to 0.5. This test was perform over the same set of random matrix (100 matrix)" width=700px
 *
 *
 * \image latex 7.png "Exemple comparing Branch-and-Bound computing time (logarithm scaled) fonction of dimension. Here fact is equal to 0.9999. This test was perform over the same set of random matrix (100 matrix)" width=500px
 *
 * \image latex 8.png "Exemple comparing Branch-and-Bound computing time (logarithm scaled) fonction of dimension. Here fact is equal to 0.5. This test was perform over the same set of random matrix (100 matrix)" width=500px
 *
 *
 * <dt><em>Matrix dimension</em>:</dt>
 * <dd>
 * A int value representing the dimension of the input lattice.
 * The test will be perform only for this dimension.
 * </dd>
 *
 * <dt><em>Matrix Coefficients</em>:</dt>
 * <dd>
 * int or ZZ values depending the program <tt>&quot;.\\lattest*</tt>.
 * They must be separed only ba a space and a back space after each line.
 * </dd>
 *
 * <dt><em>MaxNodesBB</em>:</dt>
 * <dd>
 * An integer giving the maximum number of nodes to be examined in the
 * branch-and-bound procedure when computing a figure of merit. When
 * that value is exceeded, the branch-and-bound is stopped and the program
 * is ended.
 * </dd>
 *
 * <dt><em>Output Form</em>:</dt>
 * <dd>
 * Selects on which output the results will be written. The possible values
 * are <tt>(Terminal, RES, TEX)</tt>. Lowercases are also allowed.
 *
 * <dl><dt><tt>Terminal</tt>:</dt>
 * <dd>
 * the results will be written on the terminal screen.
 * </dd>
 * <dt><tt>Res</tt>:</dt>
 * <dd>
 * the results are sent to a file with the same name as the data file, but
 * with extension <tt>.res</tt>.
 * </dd>
 * <dt><tt>Tex</tt>:</dt>
 * <dd>
 * the results are written in a file intended for LaTeX, with extension
 * <tt>.tex</tt>.
 * </dd>
 * </dl>
 * </dd>
 *
 * </dl>
 */
